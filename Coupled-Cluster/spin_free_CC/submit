#!/bin/bash
# Example qsub script for BlueRidge
# NOTE: You will need to edit the Walltime, Node and Processor Per Node (ppn), Queue, and Module lines
# to suit the requirements of your job. You will also, of course have to replace the example job
# commands below with those that run your job.

# Set the walltime, which is the maximum time your job can run in HH:MM:SS
# Note that if your job exceeds the walltime estimated during submission, the scheduler
# will kill it. So it is important to be conservative (i.e., to err on the high side)
# with the walltime that you include in your submission script. 
#PBS -l walltime=48:00:00

# Set the number of nodes, and the number of processors per node (generally should be 16)
#PBS -l nodes=1:ppn=24

# Access group
#PBS -W group_list=newriver

# Queue name. Replace normal_q with long_q to submit a job to the long queue.
# See BlueRidge documentation for details on queue parameters.
#PBS -q normal_q

# This determines which allocation this job's CPU hours are billed to.
# Replace "youraccount" below with the name of your allocation account.
#PBS -A crawdad

# Uncomment and add your email address to get an email when your job starts, completes, or aborts
##PBS -M mactay@vt.edu
##PBS -m bea

# Add any modules you might require. This example removes all modules and then adds
# the Intel compiler and mvapich2 MPI modules. Use the module avail command to see a
# list of available modules.

#module purge
#
###module load intel mvapich2 mkl
#module restore PSI4
#export LD_PRELOAD=libmkl_rt.so

PSI_SCRATCH=$SCRATCH
export PSI_SCRATCH


cd $PBS_O_WORKDIR

pwd

MYTHREAD=$((PBS_NP / 2))
echo $MYTHREAD

export OMP_NUM_THREADS=$MYTHREAD
export MKL_NUM_THREADS=$MYTHREAD 

# Print a message before running the program 
echo "------------------------------------------"
echo "Running psi4!" 
echo "Number of processors = " $PBS_NP
echo "------------------------------------------"

# Run the MPI program mpiqd. The -np flag tells MPI how many processes to use. $PBS_NP
# is an environment variable that holds the number of processes you requested. So if you
# selected nodes=2:ppn=16 above, $PBS_NP will hold 32.

python3 optrot_vg.py > Results/h2o2_atz_full_cc_optrot_mvg_diff_den

exit;
